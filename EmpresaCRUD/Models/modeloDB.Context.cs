//------------------------------------------------------------------------------
// <auto-generated>
//    Este código se generó a partir de una plantilla.
//
//    Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//    Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EmpresaCRUD.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class EmpresaCRUDEntities : DbContext
    {
        public EmpresaCRUDEntities()
            : base("name=EmpresaCRUDEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Empleados> Empleados { get; set; }
        public DbSet<Puestos> Puestos { get; set; }
    
        public virtual int agregarEmpleado(string nombreEmpleado, string apellidosEmpleado, string cedulaEmpleado, string generoEmpleado, Nullable<System.DateTime> fechaContratacionEmpleado, string direccionEmpleado, Nullable<bool> estadoEmpleado, Nullable<int> idPuesto)
        {
            var nombreEmpleadoParameter = nombreEmpleado != null ?
                new ObjectParameter("nombreEmpleado", nombreEmpleado) :
                new ObjectParameter("nombreEmpleado", typeof(string));
    
            var apellidosEmpleadoParameter = apellidosEmpleado != null ?
                new ObjectParameter("apellidosEmpleado", apellidosEmpleado) :
                new ObjectParameter("apellidosEmpleado", typeof(string));
    
            var cedulaEmpleadoParameter = cedulaEmpleado != null ?
                new ObjectParameter("cedulaEmpleado", cedulaEmpleado) :
                new ObjectParameter("cedulaEmpleado", typeof(string));
    
            var generoEmpleadoParameter = generoEmpleado != null ?
                new ObjectParameter("generoEmpleado", generoEmpleado) :
                new ObjectParameter("generoEmpleado", typeof(string));
    
            var fechaContratacionEmpleadoParameter = fechaContratacionEmpleado.HasValue ?
                new ObjectParameter("fechaContratacionEmpleado", fechaContratacionEmpleado) :
                new ObjectParameter("fechaContratacionEmpleado", typeof(System.DateTime));
    
            var direccionEmpleadoParameter = direccionEmpleado != null ?
                new ObjectParameter("direccionEmpleado", direccionEmpleado) :
                new ObjectParameter("direccionEmpleado", typeof(string));
    
            var estadoEmpleadoParameter = estadoEmpleado.HasValue ?
                new ObjectParameter("estadoEmpleado", estadoEmpleado) :
                new ObjectParameter("estadoEmpleado", typeof(bool));
    
            var idPuestoParameter = idPuesto.HasValue ?
                new ObjectParameter("idPuesto", idPuesto) :
                new ObjectParameter("idPuesto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("agregarEmpleado", nombreEmpleadoParameter, apellidosEmpleadoParameter, cedulaEmpleadoParameter, generoEmpleadoParameter, fechaContratacionEmpleadoParameter, direccionEmpleadoParameter, estadoEmpleadoParameter, idPuestoParameter);
        }
    
        public virtual ObjectResult<consultarEmpleado_Result> consultarEmpleado(Nullable<int> idEmpleado)
        {
            var idEmpleadoParameter = idEmpleado.HasValue ?
                new ObjectParameter("idEmpleado", idEmpleado) :
                new ObjectParameter("idEmpleado", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<consultarEmpleado_Result>("consultarEmpleado", idEmpleadoParameter);
        }
    
        public virtual int eliminarEmpleado(Nullable<int> idEmpleado)
        {
            var idEmpleadoParameter = idEmpleado.HasValue ?
                new ObjectParameter("idEmpleado", idEmpleado) :
                new ObjectParameter("idEmpleado", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("eliminarEmpleado", idEmpleadoParameter);
        }
    
        public virtual ObjectResult<listaEmpleados_Result> listaEmpleados()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<listaEmpleados_Result>("listaEmpleados");
        }
    
        public virtual int modificarEmpleado(Nullable<int> idEmpleado, string nombreEmpleado, string apellidosEmpleado, string cedulaEmpleado, string generoEmpleado, Nullable<System.DateTime> fechaContratacionEmpleado, string direccionEmpleado, Nullable<bool> estadoEmpleado, Nullable<int> idPuesto)
        {
            var idEmpleadoParameter = idEmpleado.HasValue ?
                new ObjectParameter("idEmpleado", idEmpleado) :
                new ObjectParameter("idEmpleado", typeof(int));
    
            var nombreEmpleadoParameter = nombreEmpleado != null ?
                new ObjectParameter("nombreEmpleado", nombreEmpleado) :
                new ObjectParameter("nombreEmpleado", typeof(string));
    
            var apellidosEmpleadoParameter = apellidosEmpleado != null ?
                new ObjectParameter("apellidosEmpleado", apellidosEmpleado) :
                new ObjectParameter("apellidosEmpleado", typeof(string));
    
            var cedulaEmpleadoParameter = cedulaEmpleado != null ?
                new ObjectParameter("cedulaEmpleado", cedulaEmpleado) :
                new ObjectParameter("cedulaEmpleado", typeof(string));
    
            var generoEmpleadoParameter = generoEmpleado != null ?
                new ObjectParameter("generoEmpleado", generoEmpleado) :
                new ObjectParameter("generoEmpleado", typeof(string));
    
            var fechaContratacionEmpleadoParameter = fechaContratacionEmpleado.HasValue ?
                new ObjectParameter("fechaContratacionEmpleado", fechaContratacionEmpleado) :
                new ObjectParameter("fechaContratacionEmpleado", typeof(System.DateTime));
    
            var direccionEmpleadoParameter = direccionEmpleado != null ?
                new ObjectParameter("direccionEmpleado", direccionEmpleado) :
                new ObjectParameter("direccionEmpleado", typeof(string));
    
            var estadoEmpleadoParameter = estadoEmpleado.HasValue ?
                new ObjectParameter("estadoEmpleado", estadoEmpleado) :
                new ObjectParameter("estadoEmpleado", typeof(bool));
    
            var idPuestoParameter = idPuesto.HasValue ?
                new ObjectParameter("idPuesto", idPuesto) :
                new ObjectParameter("idPuesto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("modificarEmpleado", idEmpleadoParameter, nombreEmpleadoParameter, apellidosEmpleadoParameter, cedulaEmpleadoParameter, generoEmpleadoParameter, fechaContratacionEmpleadoParameter, direccionEmpleadoParameter, estadoEmpleadoParameter, idPuestoParameter);
        }
    
        public virtual ObjectResult<listaPuestos_Result> listaPuestos()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<listaPuestos_Result>("listaPuestos");
        }
    
        public virtual ObjectResult<retornaEmpleadoId_Result> retornaEmpleadoId(Nullable<int> idEmpleado)
        {
            var idEmpleadoParameter = idEmpleado.HasValue ?
                new ObjectParameter("idEmpleado", idEmpleado) :
                new ObjectParameter("idEmpleado", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<retornaEmpleadoId_Result>("retornaEmpleadoId", idEmpleadoParameter);
        }
    }
}
